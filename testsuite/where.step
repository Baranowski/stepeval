let map f xs = map' xs
     where map' [] = []
           map' (x:xs) = f x : map' xs
 in case map (+ 2) [3,4] of
     [x, y]
      | x < 4 -> y
      | otherwise -> x
      where otherwise = True

case
 let map' [] = []
     map' (x:xs) = (+ 2) x : map' xs
  in map' [3, 4] of
  [x, y]
   | x < 4 -> y
   | otherwise -> x
   where otherwise = True

case
 let map' [] = []
     map' (x:xs) = (+ 2) x : map' xs
  in map' (3 : [4]) of
  [x, y]
   | x < 4 -> y
   | otherwise -> x
   where otherwise = True

case
 let map' [] = []
     map' (x:xs) = (+ 2) x : map' xs
  in (+ 2) 3 : map' [4] of
  [x, y]
   | x < 4 -> y
   | otherwise -> x
   where otherwise = True

case
 let map' [] = []
     map' (x:xs) = (+ 2) x : map' xs
  in (+ 2) 3 : map' (4 : []) of
  [x, y]
   | x < 4 -> y
   | otherwise -> x
   where otherwise = True

case
 let map' [] = []
     map' (x:xs) = (+ 2) x : map' xs
  in (+ 2) 3 : (+ 2) 4 : map' [] of
  [x, y]
   | x < 4 -> y
   | otherwise -> x
   where otherwise = True

case (+ 2) 3 : (+ 2) 4 : [] of
  [x, y]
   | x < 4 -> y
   | otherwise -> x
   where otherwise = True

case 3 + 2 : (+ 2) 4 : [] of
  [x, y]
   | x < 4 -> y
   | otherwise -> x
   where otherwise = True

case 5 : (+ 2) 4 : [] of
  [x, y]
   | x < 4 -> y
   | otherwise -> x
   where otherwise = True

case 5 : (+ 2) 4 : [] of
  [x, y]
   | 5 < 4 -> y
   | otherwise -> x
   where otherwise = True

case 5 : (+ 2) 4 : [] of
  [x, y]
   | False -> y
   | otherwise -> x
   where otherwise = True

case 5 : (+ 2) 4 : [] of
  [x, y]
   | otherwise -> x
   where otherwise = True

case 5 : (+ 2) 4 : [] of
  [x, y]
   | True -> x
   where otherwise = True

5
